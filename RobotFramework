pipeline {
  agent any
    options {
    timestamps()
    timeout(time: 30, unit: 'MINUTES')
    withCredentials([
      usernamePassword(credentialsId: 'RMCREDENTIALS',
        passwordVariable: 'IMS_PASSWORD',
        usernameVariable: 'IMS_USER')
    ])
  }


  stages {

    stage ('InstallTools') {
      steps {
      sh 'curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py'
      sh 'python get-pip.py --user'
      sh '/var/jenkins_home/.local/bin/pip install robotframework --user'
      }
    }
    stage ('Download test from GIT') {
      steps {
        checkout poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'RobotFramework']]]], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/mvanhNL/testfiles.git']]]
      }
    }
    stage('RunRobotTest') {
      steps {
        sh '/var/jenkins_home/.local/bin/pybot --outputdir RobotFramework RobotFramework/$TestName'
      }
    }
    stage('PublishHTML') {
      steps {
        emailext attachmentsPattern: 'RobotFramework/*.html', body: 'whatever', subject: 'meuk', to: $ReportMail
      }
    }
  }

  post {
    success {
      //sh 'curl -v --user $IMS_USER:$IMS_PASSWORD -H "Content-Type: application/json" -X POST --data {\"jobName\":\"$JOB_NAME\",\"buildNumber\":\"$BUILD_NUMBER\",\"pyStatusValue\":\"SUCCESS\",\"pyID\":\"$BuildID\"} "$CallBackURL" '
      echo 'wel goed'
    }
    failure {
      //sh 'curl -v --user $IMS_USER:$IMS_PASSWORD -H "Content-Type: application/json" -X POST --data {\"jobName\":\"$JOB_NAME\",\"buildNumber\":\"$BUILD_NUMBER\",\"pyStatusValue\":\"FAIL\",\"pyID\":\"$BuildID\"} "$CallBackURL" '
      echo 'niet goed'
    }
    always {
      //cleanWs notFailBuild: true, patterns: [[pattern: '***.xml', type: 'INCLUDE']]
      echo 'altijd doen'
    }
  }
}
